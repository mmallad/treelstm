/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef text_TYPES_H
#define text_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Suubjects;

typedef struct _Suubjects__isset {
  _Suubjects__isset() : index(false), text(false) {}
  bool index :1;
  bool text :1;
} _Suubjects__isset;

class Suubjects {
 public:

  Suubjects(const Suubjects&);
  Suubjects& operator=(const Suubjects&);
  Suubjects() : index(0) {
  }

  virtual ~Suubjects() throw();
  int32_t index;
  std::set<std::string>  text;

  _Suubjects__isset __isset;

  void __set_index(const int32_t val);

  void __set_text(const std::set<std::string> & val);

  bool operator == (const Suubjects & rhs) const
  {
    if (__isset.index != rhs.__isset.index)
      return false;
    else if (__isset.index && !(index == rhs.index))
      return false;
    if (__isset.text != rhs.__isset.text)
      return false;
    else if (__isset.text && !(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const Suubjects &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Suubjects & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Suubjects &a, Suubjects &b);

inline std::ostream& operator<<(std::ostream& out, const Suubjects& obj)
{
  obj.printTo(out);
  return out;
}



#endif
