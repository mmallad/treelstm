/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TextService_H
#define TextService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "idl_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TextServiceIf {
 public:
  virtual ~TextServiceIf() {}
  virtual double getSimilarityScore(const std::string& ls, const std::string& rs) = 0;
};

class TextServiceIfFactory {
 public:
  typedef TextServiceIf Handler;

  virtual ~TextServiceIfFactory() {}

  virtual TextServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TextServiceIf* /* handler */) = 0;
};

class TextServiceIfSingletonFactory : virtual public TextServiceIfFactory {
 public:
  TextServiceIfSingletonFactory(const boost::shared_ptr<TextServiceIf>& iface) : iface_(iface) {}
  virtual ~TextServiceIfSingletonFactory() {}

  virtual TextServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TextServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TextServiceIf> iface_;
};

class TextServiceNull : virtual public TextServiceIf {
 public:
  virtual ~TextServiceNull() {}
  double getSimilarityScore(const std::string& /* ls */, const std::string& /* rs */) {
    double _return = (double)0;
    return _return;
  }
};

typedef struct _TextService_getSimilarityScore_args__isset {
  _TextService_getSimilarityScore_args__isset() : ls(false), rs(false) {}
  bool ls :1;
  bool rs :1;
} _TextService_getSimilarityScore_args__isset;

class TextService_getSimilarityScore_args {
 public:

  TextService_getSimilarityScore_args(const TextService_getSimilarityScore_args&);
  TextService_getSimilarityScore_args& operator=(const TextService_getSimilarityScore_args&);
  TextService_getSimilarityScore_args() : ls(), rs() {
  }

  virtual ~TextService_getSimilarityScore_args() throw();
  std::string ls;
  std::string rs;

  _TextService_getSimilarityScore_args__isset __isset;

  void __set_ls(const std::string& val);

  void __set_rs(const std::string& val);

  bool operator == (const TextService_getSimilarityScore_args & rhs) const
  {
    if (!(ls == rhs.ls))
      return false;
    if (!(rs == rhs.rs))
      return false;
    return true;
  }
  bool operator != (const TextService_getSimilarityScore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TextService_getSimilarityScore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TextService_getSimilarityScore_pargs {
 public:


  virtual ~TextService_getSimilarityScore_pargs() throw();
  const std::string* ls;
  const std::string* rs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TextService_getSimilarityScore_result__isset {
  _TextService_getSimilarityScore_result__isset() : success(false) {}
  bool success :1;
} _TextService_getSimilarityScore_result__isset;

class TextService_getSimilarityScore_result {
 public:

  TextService_getSimilarityScore_result(const TextService_getSimilarityScore_result&);
  TextService_getSimilarityScore_result& operator=(const TextService_getSimilarityScore_result&);
  TextService_getSimilarityScore_result() : success(0) {
  }

  virtual ~TextService_getSimilarityScore_result() throw();
  double success;

  _TextService_getSimilarityScore_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const TextService_getSimilarityScore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TextService_getSimilarityScore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TextService_getSimilarityScore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TextService_getSimilarityScore_presult__isset {
  _TextService_getSimilarityScore_presult__isset() : success(false) {}
  bool success :1;
} _TextService_getSimilarityScore_presult__isset;

class TextService_getSimilarityScore_presult {
 public:


  virtual ~TextService_getSimilarityScore_presult() throw();
  double* success;

  _TextService_getSimilarityScore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TextServiceClient : virtual public TextServiceIf {
 public:
  TextServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TextServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getSimilarityScore(const std::string& ls, const std::string& rs);
  void send_getSimilarityScore(const std::string& ls, const std::string& rs);
  double recv_getSimilarityScore();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TextServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TextServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TextServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getSimilarityScore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TextServiceProcessor(boost::shared_ptr<TextServiceIf> iface) :
    iface_(iface) {
    processMap_["getSimilarityScore"] = &TextServiceProcessor::process_getSimilarityScore;
  }

  virtual ~TextServiceProcessor() {}
};

class TextServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TextServiceProcessorFactory(const ::boost::shared_ptr< TextServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TextServiceIfFactory > handlerFactory_;
};

class TextServiceMultiface : virtual public TextServiceIf {
 public:
  TextServiceMultiface(std::vector<boost::shared_ptr<TextServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TextServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TextServiceIf> > ifaces_;
  TextServiceMultiface() {}
  void add(boost::shared_ptr<TextServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double getSimilarityScore(const std::string& ls, const std::string& rs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSimilarityScore(ls, rs);
    }
    return ifaces_[i]->getSimilarityScore(ls, rs);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TextServiceConcurrentClient : virtual public TextServiceIf {
 public:
  TextServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TextServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getSimilarityScore(const std::string& ls, const std::string& rs);
  int32_t send_getSimilarityScore(const std::string& ls, const std::string& rs);
  double recv_getSimilarityScore(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
